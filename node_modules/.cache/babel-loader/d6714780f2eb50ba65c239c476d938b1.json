{"ast":null,"code":"var _jsxFileName = \"/Users/d-vipe/WebstormProjects/the_witcher_hierarchy/src/components/rosterScreen/RosterScreen.js\";\nimport React from 'react';\nimport OptionItem from '../optionItem/OptionItem';\n\nclass RosterScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectElements: [],\n      roasterList: []\n    };\n  }\n\n  componentDidMount() {\n    let allData = this.props.allData,\n        targetId = this.props.match.params.targetId,\n        parentId,\n        elements = [];\n    parentId = this.getParentId(allData);\n    elements = this.getCurrentElements(allData, parentId, targetId);\n    console.log(parentId);\n    console.log(elements);\n  }\n\n  getParentId(data, targetId) {\n    let parentId = undefined;\n    data.forEach(item => {\n      if (item.id === parseInt(targetId)) {\n        parentId = item.id;\n      }\n    });\n    return parentId;\n  }\n\n  getCurrentElements(data, parentId, targetId) {\n    let elements = {\n      neighbours: [],\n      children: []\n    };\n    data.forEach(item => {\n      if (parentId === undefined) {\n        if (item.parent === undefined) {\n          elements.neighbours.push(item);\n        }\n      } else {\n        if (item.parent === parseInt(parentId)) {\n          elements.neighbours.push(item);\n        }\n      }\n\n      if (item.parent === parseInt(targetId)) {\n        elements.children.push(item);\n      }\n    });\n    return elements;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"roster-screen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-2 align-items-top justify-content-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navigation-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"curr-target-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"col-2 align-items-top justify-content-end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default RosterScreen;","map":{"version":3,"sources":["/Users/d-vipe/WebstormProjects/the_witcher_hierarchy/src/components/rosterScreen/RosterScreen.js"],"names":["React","OptionItem","RosterScreen","Component","constructor","props","state","selectElements","roasterList","componentDidMount","allData","targetId","match","params","parentId","elements","getParentId","getCurrentElements","console","log","data","undefined","forEach","item","id","parseInt","neighbours","children","parent","push","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport OptionItem from '../optionItem/OptionItem';\n\nclass RosterScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectElements: [],\n      roasterList: []\n    }\n  }\n  componentDidMount() {\n    let allData = this.props.allData,\n        targetId = this.props.match.params.targetId,\n        parentId,\n        elements = [];\n\n    parentId = this.getParentId(allData);\n    elements = this.getCurrentElements(allData, parentId, targetId);\n\n    console.log(parentId);\n    console.log(elements);\n  }\n\n  getParentId(data, targetId) {\n    let parentId = undefined;\n    data.forEach(item => {\n      if (item.id === parseInt(targetId)) {\n        parentId = item.id;\n      }\n    });\n    return parentId;\n  }\n\n  getCurrentElements(data, parentId, targetId) {\n    let elements = {\n      neighbours: [],\n      children: []\n    };\n    data.forEach(item => {\n      if (parentId === undefined) {\n        if (item.parent === undefined) {\n          elements.neighbours.push(item);\n        }\n      } else {\n        if (item.parent === parseInt(parentId)) {\n          elements.neighbours.push(item);\n        }\n      }\n\n      if (item.parent === parseInt(targetId)) {\n        elements.children.push(item);\n      }\n    });\n    return elements;\n  }\n\n\n  render () {\n    return (\n      <div className=\"roster-screen\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-2 align-items-top justify-content-start\">\n\n            </div>\n            <div className=\"col-10\">\n              <div className=\"navigation-block\">\n                \n                <div className=\"curr-target-name\"></div>\n              </div>\n            </div>\n            <div className=\"col-2 align-items-top justify-content-end\">\n\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default RosterScreen;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/d-vipe/WebstormProjects/the_witcher_hierarchy/src/components/rosterScreen/RosterScreen.js\";\nimport React from 'react';\nimport OptionItem from '../optionItem/OptionItem';\n\nclass RosterScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectElements: [],\n      roasterList: []\n    };\n  }\n\n  componentDidMount() {\n    let allData = this.props.allData,\n        targetId = this.props.match.params.targetId;\n    console.log(allData);\n    console.log(targetId);\n  }\n\n  selectChildrenElements(data, targetId) {}\n\n  selectNeighbourElements(data, targetId) {\n    data.map(item => {\n      let targetParent = undefined;\n\n      if (item.id === parseInt(targetId)) {\n        targetParent = item.id;\n      }\n\n      return;\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"roster-screen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"second screen is in process...\");\n  }\n\n}\n\nexport default RosterScreen;","map":{"version":3,"sources":["/Users/d-vipe/WebstormProjects/the_witcher_hierarchy/src/components/rosterScreen/RosterScreen.js"],"names":["React","OptionItem","RosterScreen","Component","constructor","props","state","selectElements","roasterList","componentDidMount","allData","targetId","match","params","console","log","selectChildrenElements","data","selectNeighbourElements","map","item","targetParent","undefined","id","parseInt","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AAEA,MAAMC,YAAN,SAA2BF,KAAK,CAACG,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,cAAc,EAAE,EADL;AAEXC,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,OAAO,GAAG,KAAKL,KAAL,CAAWK,OAAzB;AAAA,QACIC,QAAQ,GAAG,KAAKN,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,CAAwBF,QADvC;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAED;;AAEDK,EAAAA,sBAAsB,CAACC,IAAD,EAAON,QAAP,EAAiB,CAEtC;;AAEDO,EAAAA,uBAAuB,CAACD,IAAD,EAAON,QAAP,EAAiB;AACtCM,IAAAA,IAAI,CAACE,GAAL,CAASC,IAAI,IAAI;AACf,UAAIC,YAAY,GAAGC,SAAnB;;AACA,UAAIF,IAAI,CAACG,EAAL,KAAYC,QAAQ,CAACb,QAAD,CAAxB,EAAoC;AAClCU,QAAAA,YAAY,GAAGD,IAAI,CAACG,EAApB;AACD;;AAED;AACD,KAPD;AAQD;;AAEDE,EAAAA,MAAM,GAAI;AACR,WACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF;AAKD;;AArCwC;;AAwC3C,eAAevB,YAAf","sourcesContent":["import React from 'react';\nimport OptionItem from '../optionItem/OptionItem';\n\nclass RosterScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectElements: [],\n      roasterList: []\n    }\n  }\n  componentDidMount() {\n    let allData = this.props.allData,\n        targetId = this.props.match.params.targetId;\n    console.log(allData);\n    console.log(targetId);\n\n  }\n\n  selectChildrenElements(data, targetId) {\n\n  }\n\n  selectNeighbourElements(data, targetId) {\n    data.map(item => {\n      let targetParent = undefined;\n      if (item.id === parseInt(targetId)) {\n        targetParent = item.id;\n      }\n\n      return \n    });\n  }\n\n  render () {\n    return (\n      <div className=\"roster-screen\">\n        second screen is in process...\n      </div>\n    )\n  }\n}\n\nexport default RosterScreen;\n"]},"metadata":{},"sourceType":"module"}